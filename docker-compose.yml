version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: birth_health_network
      POSTGRES_USER: bhn_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - bhn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bhn_user -d birth_health_network"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: birth_health_network
      DB_USER: bhn_user
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password}
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_here}
      JWT_EXPIRE: 24h
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secure_refresh_secret_key_here}
      JWT_REFRESH_EXPIRE: 7d
      BCRYPT_ROUNDS: 12
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      FRONTEND_URL: http://localhost
      CORS_ORIGIN: http://localhost
    volumes:
      - backend_logs:/app/logs
    ports:
      - "3001:3001"
    networks:
      - bhn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      NODE_ENV: production
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bhn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - bhn-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  bhn-network:
    driver: bridge